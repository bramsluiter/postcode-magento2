<?php
/**
 *
 *          ..::..
 *     ..::::::::::::..
 *   ::'''''':''::'''''::
 *   ::..  ..:  :  ....::
 *   ::::  :::  :  :   ::
 *   ::::  :::  :  ''' ::
 *   ::::..:::..::.....::
 *     ''::::::::::::''
 *          ''::''
 *
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Creative Commons License.
 * It is available through the world-wide-web at this URL:
 * http://creativecommons.org/licenses/by-nc-nd/3.0/nl/deed.en_US
 * If you are unable to obtain it through the world-wide-web, please send an email
 * to support@tig.nl so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade this module to newer
 * versions in the future. If you wish to customize this module for your
 * needs please contact support@tig.nl for more information.
 *
 * @copyright   Copyright (c) Total Internet Group B.V. https://tig.nl/copyright
 * @license     http://creativecommons.org/licenses/by-nc-nd/3.0/nl/deed.en_US
 */
?>
<script type="text/javascript">
    require([
        'jquery',
        'TIG_Postcode/js/Helper/Logger',
        'jquery-ui-modules/autocomplete'
    ], function(
        $,
        Logger
    ){
        var request = null;
        var timer = null;

        var postcodeSearch = function(formData) {
            if (self.request !== undefined) {
                self.request.abort('avoidMulticall');
            }

            if (!$.isArray(formData) || formData.length === 0) {
                var errorMessage = $.mage.__('Please enter a valid zip code and house number.');
                handleError(errorMessage);
                return;
            }

            self.request = $.ajax({
                method:'GET',
                url: '<?= $block->escapeHtml($block->getPostcodeUrl());?>',
                data: {
                    huisnummer : formData[0],
                    postcode   : formData[1]
                }
            }).done(function (data) {
                var errorMessage = $.mage.__('Unexpected error occurred. Please fill in the address details manually.');

                if (data === null || !data.success) {
                    var message = 'Sorry, we could not find the address on the given zip code and house number '
                        + 'combination. If you are sure that the zip code and house number are correct, '
                        + 'please fill in the address details manually.';
                    errorMessage = $.mage.__(message);
                }

                if (data.straatnaam && data.woonplaats) {
                    $('.field.street').find('.control input').first().val(data.straatnaam);
                    $('.field.city').find('.control input').val(data.woonplaats);

                    errorMessage = null;
                }

                handleError(errorMessage);
            }).fail(function (data) {
                Logger.error(data);

                if (data.statusText !== 'avoidMulticall') {
                    var message = 'Unexpected error occurred. Please fill in the address details manually.';
                    var errorMessage = $.mage.__(message);
                    handleError(errorMessage);
                }
            });
        }.bind(request);

        var handleError = function(errorMessage) {
            var error = $('.tig-postcode-validation-message');
            error.hide();

            if (errorMessage) {
                enableAddressFields(true);
                error.html(errorMessage).show();
            }
        };

        var enableAddressFields = function(enableFields) {
            var street = $('.field.street').find('.control input:eq(0)');
            var city = $('.field.city').find('.control input');

            if (enableFields === true) {
                street.prop('readonly', false).removeClass('_disabled');
                city.prop('readonly', false).removeClass('_disabled');
            } else {
                street.prop('readonly', true).addClass('_disabled');
                city.prop('readonly', true).addClass('_disabled');
            }
        };

        var hideAddressFields = function(hideFields) {
            var streets = [
                $('.field.street').find('.control input:eq(1)'),
                $('.field.street').find('.control input:eq(2)'),
                $('.field.street').find('.control input:eq(3)'),
            ];

            for (var i=0; i < streets.length; i++) {
                if (hideFields === true) {
                    streets[i].hide();
                } else {
                    streets[i].show();
                }
            }
        };

        var updateFieldData = function() {
            var country = $('.field.country .control select').val();

            if (country !== 'NL' && country !== 'BE') {
                enableAddressFields(true);
                hideAddressFields(false);
                $('.tig-postcode-field-group-account').removeClass('tig-postcode-field-group');

                return;
            }

            hideAddressFields(true);
            $('.tig-postcode-field-group-account').addClass('tig-postcode-field-group');

            if (country === 'NL') {
                if (self.timer !== undefined) {
                    clearTimeout(self.timer);
                }

                self.timer = setTimeout(function () {
                    setFieldData();
                }, 1000);
            }
        }.bind(timer);

        var setFieldData = function() {
            var formData = getFormData();

            if (formData !== false) {
                enableAddressFields(false);
                postcodeSearch(formData);
            } else {
                enableAddressFields(true);
            }
        };

        var getFormData = function() {
            var postcodeRegex = /^[1-9][0-9]{3} ?(?!sa|sd|ss)[a-z]{2}$/i;

            var housenumber = $('.field.tig-housenumber .control input').val();
            var zipcode = $('.field.zip .control input').val();

            if (!housenumber || !zipcode) {
                return false;
            }

            if (!$.isNumeric(housenumber) || !postcodeRegex.test(zipcode)) {
                var errorMessage = $.mage.__('Please enter a valid zip code and house number.');
                handleError(errorMessage);
                return false
            }

            return [housenumber, zipcode];
        };

        var observeCountry = function() {
            var country = $('.field.country .control select').val();

            $('.field.street').find('.control input').first().attr('placeholder', '');
            $('.field.tig-housenumber').removeClass('tig-housenumber-be').hide();
            $('.field.tig-housenumber-addition').removeClass('tig-housenumber-addition-be').hide();
            $('.tig_zipcodezone_autocomplete').removeClass('tig-postcode-be');

            // The method will hide potential visible error messages by passing null as argument
            handleError(null);

            if (country === 'NL' || country === 'BE') {
                $('.field.tig-housenumber').show();
                $('.field.tig-housenumber-addition').show();
            }

            if (country === 'BE') {
                var zip = $('.field.zip .control input').val();

                if (!zip) {
                    var placeholder = $.mage.__('Please select a postcode before filling the street field.');
                    $('.field.street').find('.control input').first().attr('placeholder', placeholder);
                }

                $('.tig_zipcodezone_autocomplete').addClass('tig-postcode-be');
                $('.field.tig-housenumber').addClass('tig-housenumber-be');
                $('.field.tig-housenumber-addition').addClass('tig-housenumber-addition-be');
            }

            updateFieldData();
        };

        $('.field.country').insertBefore('.field.street');

        var postcodeContainer = $(
            '<div/>',
            {'class': 'tig-postcode-field-group tig-postcode-field-group-account field fieldset'}
        );
        postcodeContainer.insertAfter('.field.country');

        $('.field.zip').appendTo(postcodeContainer);

        var housenumberElement = $('.field.zip').clone();
        housenumberElement.removeClass('zip').addClass('tig-housenumber');
        housenumberElement.find('label').attr('for', 'tig-housenumber');
        housenumberElement.find('label span').text('<?= $block->escapeHtml(__('House number')); ?>');

        var housenumberInput = housenumberElement.find('.control input');
        housenumberInput.attr('title', '<?= $block->escapeHtml(__('House number')); ?>');
        housenumberInput.attr('name', 'tig-housenumber');
        housenumberInput.attr('id', 'tig-housenumber');
        housenumberInput.val($('.field.street').find('.control input:eq(1)').val());
        housenumberInput.removeClass('validate-zip-international');
        housenumberInput.addClass('validate-number').addClass('required-entry');

        housenumberInput.keyup(updateFieldData);
        $('.field.zip .control').keyup(updateFieldData);

        housenumberElement.appendTo(postcodeContainer);

        var housenoAdditionElement = $('.field.zip').clone();
        housenoAdditionElement.removeClass('zip').removeClass('required').addClass('tig-housenumber-addition');
        housenoAdditionElement.find('label').attr('for', 'tig-housenumber-addition');
        housenoAdditionElement.find('label span').text('<?= $block->escapeHtml(__('Addition')); ?>');

        var housenoAdditionInput = housenoAdditionElement.find('.control input');
        housenoAdditionInput.attr('title', '<?= $block->escapeHtml(__('Addition')); ?>');
        housenoAdditionInput.attr('name', 'tig-housenumber-addition');
        housenoAdditionInput.attr('id', 'tig-housenumber-addition');
        housenoAdditionInput.val($('.field.street').find('.control input:eq(2)').val());
        housenoAdditionInput.removeClass('validate-zip-international');

        housenoAdditionElement.appendTo(postcodeContainer);

        $('.field.street').addClass('tig-street-autocomplete');
        $('.field.street').find('.control input').first().attr('autocomplete', 'no');
        $('.field.zip').addClass('tig_zipcodezone_autocomplete');
        $('.field.zip').find('.control input').attr('autocomplete', 'no');

        var validationMessage = '<div class="tig-postcode-validation-message"></div>';
        $(validationMessage).insertAfter('.tig-postcode-field-group');

        $('.field.country .control select').change(observeCountry);

        observeCountry();

        $(".tig_zipcodezone_autocomplete .input-text").each(function () {
            $(this).parent().append('<span class="tig-autocomplete-result-city"></span>');
            $(this).autocomplete({
                source : function (zipcodezone, response) {
                    this.menu.element.addClass("tigAutocomplete");
                    this.menu.element.addClass('tigJqueryUiClass');
                    var country = $('.field.country .control select').val();

                    if (country !== 'BE' || '<?= $block->escapeHtml($block->isPostcodeBeCheckOn());?>' === 'false') {
                        /**
                         * Somehow the loader occasionally pops up on different countries.
                         * Here we force remove the loader.
                         */
                        this.element.removeClass('ui-autocomplete-loading');
                        response([]);
                        return;
                    }
                    response([$.mage.__('Busy with loading zipcodes...')]);
                    /** Prevent tabbing while zipcode is still loading.*/
                    this.element.on('keydown', function (objEvent) {
                        if (objEvent.keyCode == 9) {
                            objEvent.preventDefault();
                        }
                    });
                    $.ajax({
                        method         : 'GET',
                        url            : '<?= $block->escapeHtml($block->getBePostcodeUrl());?>',
                        data           : {
                            zipcodezone : zipcodezone.term
                        },
                        zipcodeElement : this
                    }).done(function (data) {
                        /** This part will refresh the data inside the array */

                        // Force remove the loader & re-enable tabbing out of the field.
                        this.zipcodeElement.element.removeClass('ui-autocomplete-loading');

                        if (data.success == false) {
                            response([$.mage.__('No results found.')]);
                            return;
                        }

                        var selectBoxArr = [];
                        $.each(data, function (key, value) {
                            selectBoxArr.push(data[key].postcode + ' - ' + data[key].plaats);
                        });

                        response(selectBoxArr);
                        setTimeout(function (zipcodeElement) {
                            zipcodeElement.element.off('keydown');
                        }, 250, this.zipcodeElement);
                    }).fail(function (data) {
                        console.log(data);
                    });
                },
                select : function (event, ui) {
                    /** Prevent weird values being inserted into the postcode / city fields **/
                    if (ui.item.value == $.mage.__('Busy with loading zipcodes...') ||
                        ui.item.value == $.mage.__('No results found.')) {
                        ui.item.value = '';
                        return false;
                    }

                    $('.field.city').find('.control input').val(ui.item.value.substring(7, ui.item.value.length));
                    $('.field.street').find('.control input').first().attr('placeholder', '');

                    event.target.parentElement.getElementsByClassName('tig-autocomplete-result-city')[0]
                        .textContent = ui.item.value.substring(4, ui.item.value.length);
                    ui.item.value = ui.item.value.substring(0, 4);
                    window.currentZipcode = ui.item.value;
                },
                close : function (event) {
                    var menuElement = $('\\.tigAutocomplete');
                    if (event.originalEvent !== undefined &&
                        event.originalEvent.type !== 'menuselect' &&
                        !menuElement.is(":visible")
                    ) {
                        menuElement.show();

                        return false;
                    }
                    $("input[name*='postcode']").trigger('change');
                    $("input[name*='city']").trigger('change');
                },
                delay : 0
            });
        });

        $(".tig-street-autocomplete .input-text").each(function () {
            $(this).autocomplete({
                source : function (request, response) {
                    this.menu.element.addClass('tigJqueryUiClass');
                    this.menu.element.appendTo(this.element.closest('.tig-street-autocomplete'));
                    var country = $('.field.country .control select').val();

                    if (country !== 'BE' || '<?= $block->escapeHtml($block->isPostcodeBeCheckOn());?>' === 'false') {
                        /** Somehow the loader occasionally pops up on different countries.
                         * Here we force remove the loader. */
                        this.element.removeClass('ui-autocomplete-loading');
                        response([]);
                        return;
                    }

                    response([$.mage.__('Busy with loading streets...')]);

                    $.ajax({
                        method : 'GET',
                        url    : '<?= $block->escapeHtml($block->getBeStreetUrl());?>',
                        data   : {
                            zipcode : $('.field.zip .control input').val(),
                            city    : $('.field.city .control input').val(),
                            street  : $('.field.street .control input').first().val()
                        },
                        streetElement : this
                    }).done(function (data) {
                        /**
                         * This part will refresh the data inside the array
                         */
                        this.streetElement.element.removeClass('ui-autocomplete-loading');

                        if (data.success == false) {
                            response([$.mage.__('No results found. Please fill in manually.')]);
                            return;
                        }
                        var selectBoxArr = [];
                        $.each(data, function (key, value) {
                            selectBoxArr.push(value.straat);
                        });

                        response(selectBoxArr);
                    }).fail(function (data) {
                        console.log(data);
                    });
                },
                select : function (event, ui) {
                    /** Prevent weird values being inserted into the postcode / city fields **/
                    if (ui.item.value == $.mage.__('Busy with loading streets...') ||
                        ui.item.value == $.mage.__('No results found. Please fill in manually.')) {
                        ui.item.value = '';
                        return false;
                    }
                },
                close : function (event, ui) {
                    $("input[name*='street']").trigger('change');
                }
            });
        });
    });
</script>
